#!/bin/python

import json
import datetime
import os
from copy import copy
import sys
from random import choice, shuffle
AgendaFile = "%s/agenda-data.json" % os.getenv("HOME")

try:
    from colored import fg
    Colored=1
except ImportError:
    Colored=0

def smartsplit(text):
    S = text.split(' ')

    for k in range(len(S)):
        for ASPAS in [ '"', "'" ]:
            if S[k] and S[k].startswith(ASPAS) and not " " in S[k] :
                for v in range(k+1,len(S)-1):
                    if S[v].endswith(ASPAS):
                        S[k] = ' '.join([x for x in S[k:v+1] if x])
                        S[k] = S[k][1:-1]
                        for D in range(k+1,v+1):
                            S[D] = 0
    S = [ x for x in S if x ]

    return S
class Day():
    def __init__(self, name):
        self.Name = name
        self.Actions = []

    def addAction(self, data):
        self.Actions += [Action(data)]

    def delAction(self, action):
        for I in range(len(self.Actions)):
            if self.Actions[I].Name == action:
                self.Actions.pop(I)
                break
    def showAgenda(self, show=True):
        header = "        | %s |" % self.Name.upper()
        if show:
            print(header)
            print("")
        TEXT = []
        TEXT += [[header, 'grey'], ["", 'white']]
        IDX=0
        for A in self.Actions:
            if A.attributes["hidden"]:
                IDX+=1
                continue
            _color = A.attributes["color"]
            if A.attributes["done"]:
                _color = 'green'
            outText = "%i    %s" % (IDX+1, A.attributes["name"])
            if show:
                printColor(outText, _color)
            print('')
            TEXT.append([outText, _color])
            TEXT.append(['','grey'])
            IDX+=1
        return TEXT
    def toData(self):

        return [A.toData() for A in self.Actions]
      

    def selectByNameOrIndex(self, action, selectByIndex=True):
        if selectByIndex:
            try:
                self.Actions[int(action)-1]
                return int(action)-1
            except:
                pass
        
        for a in range(len(self.Actions)):
            if self.Actions[a].attributes["name"].lower() == action.lower():
                return a
            return None
    def resetDone(self):
        for a in self.Actions:
            a.attributes["done"]= False

            
class Action():
    def __init__(self,  data):
        self.attributes = copy(data)

        maybe_ommited_parameters= ["hidden", "color", "done"]
        for p in maybe_ommited_parameters:
            if not p in self.attributes.keys():
                self.attributes[p] = False


    def toData(self):
        return copy(self.attributes)
    

def loadData():
    try:
        datafile = open(AgendaFile)
        
    except:
        return
    datafile = datafile.read()
    #print(datafile)

    if len(datafile) < 3: 
        return
    
    data = json.loads(datafile)
    
    for day in range(len(data["agenda"])):
        for action in data["agenda"][day]:
            days[day].addAction(action)
        #shuffle(days[day].Actions)
            
    today = datetime.datetime.now()


    for D in range(len(days)):
        diff = getToday() - D
        if diff in [-3,-2,-1,4,5]:
            days[D].resetDone()
    global colorInfo
    if 'colorinfo' in data.keys():
        colorInfo = data["colorinfo"]
    else:
        colorInfo = {}
def printSideBySide():      
    for k in [0,3]:
        DAYS = [days[k+x].showAgenda(show=False) for x in range(3)]
        
        maxLen = max([len(x) for x in DAYS])
        for d in DAYS:
                
            while len(d) < maxLen:
                d.append(['','grey'])

        for l in range(maxLen):
            for d in DAYS:
                cprint(d[l][0] + " "*(40-len(d[l][0])),d[l][1], end="")
            print('')

def getToday():
    today = datetime.datetime.today().weekday()
    today += 1
    if today > 6:
        today = 0

    return today
def saveAgenda():
    datafile = open(AgendaFile, 'w')
    today = datetime.datetime.now()

    agendaData = {"agenda": [x.toData() for x in days], "lastsave":
            [today.day,today.month],"colorinfo":colorInfo}
    #print(agendaData)
    textData = json.dumps(agendaData)

    datafile.write(textData)
def printColor(text, color):
    color = ParseColor(color)
    if color:
        print("%s %s %s" % (fg(color), text, fg('white')))
    else:
        print(text)
def printColorInfo():
    for k in colorInfo.keys():
        printColor("%s: %s" % (k, colorInfo[k]), k)
def getDayByFraction(text):
    if text == "t":
        return getToday()
    result = []
    for day in IDdays:
        if text.lower() in day.lower():
            result.append(IDdays.index(day))
    if len(result) == 1:
        return result[0]
    else:
        return None
IDdays = ["Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"]
ValidStockColor = ["blue", "green", "red", "cyan", "yellow", "magenta", "grey",
        "white"]
ValidAdditionalColor = {"shit": "orange_4a", "orange": "dark_orange_3a",
                        "pink": "deep_pink_4c", "purple": "purple_1b",
                        "brown": "dark_red_1", "sea": "navy_blue"}

def ParseColor(Color):
    if Color in ValidStockColor:
        return Color
    if Color in list(ValidAdditionalColor.keys()):
        return ValidAdditionalColor[Color]
            
days = [ Day(d) for d in IDdays ]
loadData()

def CommandParser(command):
    _color = None
    Day = None
    command = smartsplit(command)
    C_lenght = len(command)
    possibleday = None
    for C in range(C_lenght):

        if command[C] == "add" and C_lenght >= C+2: 
            if C_lenght >= C+4 and ParseColor(command[C+3]):
                _color = command[C+3]
            possibleday = getDayByFraction(command[C+1])
            if possibleday != None:
                days[possibleday].addAction({"name": command[C+2], "color": _color})
                
                print("adding %s to %s." % (command[C+2],
                    days[possibleday].Name))

        if command[C] == "del" and C_lenght >= C+1:
            if C_lenght >= C+2:
                possibleday = getDayByFraction(command[C+1])
            if possibleday != None:
                print("deleting %s"%command[C+2])
                a = days[possibleday].selectByNameOrIndex(command[C+2])
                if a != None:
                    days[possibleday].Actions.pop(a)
            else:
                print("globally deleting %s" % command[C+1])
                for day in days:
                    a = day.selectByNameOrIndex(command[C+1],
                            selectByIndex=False)
                    print(a)
                    if a != None:
                        day.Actions.pop(a)
                        
        if (command[C] == "hide" or command[C] == "unhide") and C_lenght >= C+1:
            possibleday = getToday()
            a = days[possibleday].selectByNameOrIndex(command[C+1])
            if a != None:
                days[possibleday].Actions[a].attributes["hidden"] =\
                        True if command[C] == "hide" else False

        if command[C] == "view":
            if len(command) >= C+2:
                if command[C+1] == "a":
                    for day in days:
                        day.showAgenda()
                else:
                    possibleday = getDayByFraction(command[C+1])
                    if possibleday != None:
                        days[possibleday].showAgenda()
            else:
                days[getToday()].showAgenda()

        if command[C] == "copy" or command[C] == "move":
            if len(command) >= C+3:
                dayfrom = getDayByFraction(command[C+1])
                if dayfrom == None:
                    return
                entry = days[dayfrom].selectByNameOrIndex(command[C+2])
                dayto = getDayByFraction(command[C+3])

                for k in [entry,dayto]:
                    if k == None:
                        return
                piece = days[dayfrom].Actions[entry].toData()
                piece["done"] = False
                days[dayto].addAction(data=piece)
                if command[C] == "move":
                    days[dayfrom].Actions.pop(entry)
                    PrintAction = "Moved"
                else:
                    PrintAction = "Copied"
                print("%s entry %s to %s!" % (
                    PrintAction,
                    days[dayfrom].Actions[entry].attributes["name"],
                    days[dayto].Name))

        if command[C] == "done" and C_lenght >= C+1:
            TargetDay = getToday()
            a = days[TargetDay].selectByNameOrIndex(command[C+1])

            if a == None and C_lenght >= C+2:
                TargetDay = getDayByFraction(command[C+1])
                a = days[TargetDay].selectByNameOrIndex(command[C+2])
            if a !=None:
                A = days[TargetDay].Actions[a]
                A.attributes["done"] = True
                print("Done with %s of %s." % (A.attributes["name"],
                    days[TargetDay].Name))

        if command[C] == "changecolor" and C_lenght >= C+2:
            TargetDay = getDayByFraction(command[C+1])
            if TargetDay == None:
                TargetDay = getToday()
            a = days[TargetDay].selectByNameOrIndex(command[C+2])
            if a != None:
                newcolor = ParseColor(command[C+3])
                if newcolor:
                    A = days[TargetDay].Actions[a]
                    A.attributes["color"] = newcolor
                    print("changing %s's color to %s" %
                            (A.attributes["name"],newcolor))

        if command[C] == "info" and C_lenght >= C+2:
            if ParseColor(command[C+1]):
                TargetColor = command[C+1]
                colorInfo[TargetColor] = command[C+2]

        if command[C] == "color":
            printColorInfo()

        if command[C] == "sbs":
            printSideBySide()
        if command[C] == "save":
                saveAgenda()
        if command[C] == "load":
                loadData()
        if command[C] == "help":
                print(Help)
        if command[C] == "q":
                exit()
        if command[C] == "wq" or command[C] == "qw":
                saveAgenda()
                exit()
Help = """
    Commands in the agenda's prompt:
    obs: "day" can be 't' for today or a part of the weekday's name.
         "action" can be it's index number within the day or it's name.
         pieces marked with * are optional.

        >view;
        >view a;
        >view monday; 
            //view the agenda. With 'a' shows all the week,
                while alone shows today, or with a "day" will show that day.
        >add "day*" "action" "color*" 
            //add an action to a day;
        >copy >day> "action" "targetday" 
            //copy an action from day to target day
        >del <day> "action" 
            //delete action from a day
        >done "action" 
            //mark action as done, for today.
        >changecolor <day> <action> <color>
            //change a, assignment's color.
        >info <color> "description"
            //set info on a valid color, describing what they mean in your routine.
        >color
            //view stored color info.
        >save 
            //save current agenda. Data file is saved at home directory.
        >load 
            //reload the agenda.
        >q
            //quit agenda-gerenciator.
        >wq
            //save and quit."""

StartUpAction = 0
for k in range(1,len(sys.argv)):
    if sys.argv[k][0] == "d":
        try:
            D = days[getToday()].selectByNameOrIndex(sys.argv[k][1:])
            days[getToday()].Actions[D].attributes["done"] = True
            StartUpAction = 1
        except:
            raise
            continue
    TargetDay = getDayByFraction(sys.argv[k])
    if TargetDay != None:
        days[TargetDay].showAgenda()
        StartUpAction=1
    if sys.argv[k][0] == "v":
        CommandParser('view')
        StartUpAction=1
    if sys.argv[k][0] == "r":
        W = [x for x in days[getToday()].Actions if not x.attributes["done"] ]
        if W:
            DO = choice(W)
            print("You should do ", end= "")
            printColor(DO.attributes["name"] + ".", DO.attributes["color"])
        else:
            print("Nothing to do!")

        StartUpAction=1
if StartUpAction:
    saveAgenda()
    exit()
CommandParser('view')
while True:
    try:
        x = input(">>>")
        CommandParser(x)
    except KeyboardInterrupt:
        print("")
        exit()
